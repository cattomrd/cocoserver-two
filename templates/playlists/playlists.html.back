{% extends "base.html" %}

{% block content %}
    <div class="container">
        <h1 class="mb-4 text-center">Gestión de Listas de Reproducción</h1>
        
        <!-- Formulario para crear nueva playlist -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Crear Nueva Lista de Reproducción</h5>
                        <button type="button" class="btn btn-primary" data-bs-toggle="collapse" data-bs-target="#playlistForm">
                            <i class="fas fa-plus"></i> Mostrar/Ocultar
                        </button>
                    </div>
                    <div id="playlistForm" class="collapse">
                        <div class="card-body">
                            <form id="playlistCreateForm">
                                <div class="mb-3">
                                    <label for="playlistTitle" class="form-label">Título</label>
                                    <input type="text" class="form-control" id="playlistTitle" name="title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="playlistDescription" class="form-label">Descripción</label>
                                    <textarea class="form-control" id="playlistDescription" name="description" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="playlistStartDate" class="form-label">Fecha de Inicio (opcional)</label>
                                    <input type="datetime-local" class="form-control" id="playlistStartDate" name="start_date">
                                </div>
                                <div class="mb-3">
                                    <label for="playlistExpiration" class="form-label">Fecha de Expiración (opcional)</label>
                                    <input type="datetime-local" class="form-control" id="playlistExpiration" name="expiration_date">
                                </div>
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="playlistActive" name="is_active" checked>
                                    <label class="form-check-label" for="playlistActive">Lista Activa</label>
                                </div>
                                <button type="submit" class="btn btn-primary btn-lg">Crear Lista de Reproducción</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Controles de búsqueda y filtros para playlists -->
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="input-group">
                    <input type="text" id="playlistSearchInput" class="form-control" placeholder="Buscar listas por título o descripción...">
                    <button class="btn btn-outline-primary" type="button" id="clearPlaylistSearch">
                        <i class="fas fa-times"></i> Limpiar
                    </button>
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="playlistFilterStatus">
                    <option value="all">Todas las listas</option>
                    <option value="active">Listas activas</option>
                    <option value="inactive">Listas inactivas</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="playlistPageSizeSelect">
                    <option value="25" selected>25 por página</option>
                    <option value="50">50 por página</option>
                    <option value="100">100 por página</option>
                    <option value="200">200 por página</option>
                    <option value="500">Todas las listas</option>
                </select>
            </div>
        </div>

        <!-- Información de resultados y paginación -->
        <div class="row mb-2">
            <div class="col-md-6">
                <span id="playlistCountBadge" class="badge bg-info fs-6">0 listas</span>
            </div>
            <div class="col-md-6 text-end">
                <small class="text-muted" id="playlistPaginationInfo">
                    Mostrando 0 - 0 de 0 resultados
                </small>
            </div>
        </div>

        <!-- Tabla de listas de reproducción -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>Listas de Reproducción
                </h5>
                <div class="d-flex align-items-center">
                    <div class="btn-group" role="group" aria-label="Navegación de páginas">
                        <button class="btn btn-sm btn-outline-secondary me-2"  
                                id="firstPlaylistPageBtn" onclick="goToFirstPlaylistPage()" 
                                title="Primera página">
                            <i class="fas fa-angle-double-left"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" 
                                id="prevPlaylistPageBtn" onclick="goToPrevPlaylistPage()" 
                                title="Página anterior">
                            <i class="fas fa-angle-left"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" 
                                id="nextPlaylistPageBtn" onclick="goToNextPlaylistPage()" 
                                title="Página siguiente">
                            <i class="fas fa-angle-right"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" 
                                id="lastPlaylistPageBtn" onclick="goToLastPlaylistPage()" 
                                title="Última página">
                            <i class="fas fa-angle-double-right"></i>
                        </button>
                    </div>
                    
                    <div class="d-flex align-items-center">
                        <small class="text-muted me-2">Página</small>
                        <input type="number" id="playlistPageInput" class="form-control form-control-sm text-center" 
                               style="width: 60px;" min="1" value="1" 
                               onchange="goToPlaylistPage(parseInt(this.value))"
                               onkeypress="if(event.key==='Enter') goToPlaylistPage(parseInt(this.value))">
                        <small class="text-muted ms-2">de <span id="totalPlaylistPages">1</span></small>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive" style="min-height: 300px;">
                    <table class="table table-striped table-hover mb-0" id="playlistsTable">
                        <thead class="table-dark">
                            <tr>
                                <th>
                                    <button class="btn btn-link text-white text-decoration-none p-0" 
                                            onclick="sortPlaylistTable('title')" 
                                            title="Ordenar por título">
                                        Título <i class="fas fa-sort ms-1"></i>
                                    </button>
                                </th>
                                <th>Descripción</th>
                                <th>
                                    <button class="btn btn-link text-white text-decoration-none p-0" 
                                            onclick="sortPlaylistTable('video_count')" 
                                            title="Ordenar por número de videos">
                                        Videos <i class="fas fa-sort ms-1"></i>
                                    </button>
                                </th>
                                <th>
                                    <button class="btn btn-link text-white text-decoration-none p-0" 
                                            onclick="sortPlaylistTable('expiration_date')" 
                                            title="Ordenar por fecha de expiración">
                                        Expiración <i class="fas fa-sort ms-1"></i>
                                    </button>
                                </th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="playlistsList">
                            <tr>
                                <td colspan="6" class="text-center py-3" id="playlistsLoading">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                    <p class="mt-2">Cargando listas de reproducción...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="card-footer bg-light">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <small class="text-muted">
                            <i class="fas fa-info-circle"></i>
                            Tip: Usa los filtros y búsqueda para encontrar listas específicas
                        </small>
                    </div>
                    <div class="col-md-6 text-end">
                        <small class="text-muted" id="playlistPaginationFooter">
                            <!-- Información adicional de paginación -->
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para detalles de playlist -->
    <div class="modal fade" id="playlistDetailModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="playlistDetailTitle">Detalles de la Lista</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="playlistInfo">
                        <p id="playlistDetailDescription"></p>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div>
                                <span class="badge bg-info" id="playlistDetailDate"></span>
                                <span class="badge" id="playlistDetailStatus"></span>
                                <span class="badge" id="playlistDetailExpirationDate"></span>
                            </div>
                            <div>
                                <button class="btn btn-outline-primary" id="editPlaylistBtn">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-success" id="playlistDownloadBtn">
                                    <i class="fas fa-download"></i> Descargar Lista
                                </button>
                            </div>
                        </div>
                        
                        <ul class="nav nav-tabs mb-3" id="playlistDetailTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="videos-detail-tab" data-bs-toggle="tab" data-bs-target="#videosTab" type="button" role="tab" aria-controls="videosTab" aria-selected="true">
                                    Videos
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="devices-detail-tab" data-bs-toggle="tab" data-bs-target="#devicesTab" type="button" role="tab" aria-controls="devicesTab" aria-selected="false">
                                    Dispositivos
                                </button>
                            </li>
                        </ul>
                        
                        <div class="tab-content" id="playlistDetailTabsContent">
                            <div class="tab-pane fade show active" id="videosTab" role="tabpanel" aria-labelledby="videos-detail-tab">
                                <h6 class="mb-3">Videos en esta lista</h6>
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover">
                                        <thead>
                                            <tr>
                                                <th>Título</th>
                                                <th>Descripción</th>
                                                <th>Expiración</th>
                                                <th>Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody id="playlistVideos">
                                            <!-- Videos en la lista -->
                                        </tbody>
                                    </table>
                                </div>
                                
                                <hr class="my-4" />
                                
                                <h6>Agregar videos a esta lista</h6>
                                <div class="input-group input-group-lg mb-3">
                                    <select class="form-select" id="addVideoSelect">
                                        <option value="">Seleccionar video...</option>
                                    </select>
                                    <button class="btn btn-primary" id="addVideoBtn">Agregar Video</button>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="devicesTab" role="tabpanel" aria-labelledby="devices-detail-tab">
                                <h6 class="mb-3">Dispositivos asignados a esta lista</h6>
                                <div id="assignedDevicesContainer">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                </div>
                                
                                <hr class="my-4" />
                                
                                <h6>Asignar más dispositivos a esta lista</h6>
                                <div class="input-group input-group-lg mb-3">
                                    <select class="form-select" id="addDeviceSelect">
                                        <option value="">Seleccionar dispositivo...</option>
                                    </select>
                                    <button class="btn btn-primary" id="addDeviceBtn">Asignar Dispositivo</button>
                                </div>
                                
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle"></i> 
                                    Los dispositivos asignados reproducirán automáticamente esta lista si está activa.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-lg" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-danger btn-lg" id="deletePlaylistBtn">Eliminar Lista</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para editar playlist -->
    <div class="modal fade" id="editPlaylistModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editar Lista de Reproducción</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editPlaylistForm">
                        <input type="hidden" id="editPlaylistId">
                        <div class="mb-3">
                            <label for="editPlaylistTitle" class="form-label">Título</label>
                            <input type="text" class="form-control" id="editPlaylistTitle" required>
                        </div>
                        <div class="mb-3">
                            <label for="editPlaylistDescription" class="form-label">Descripción</label>
                            <textarea class="form-control" id="editPlaylistDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editPlaylistStartDate" class="form-label">Fecha de Inicio (opcional)</label>
                            <input type="datetime-local" class="form-control" id="editPlaylistStartDate" name="start_date">
                        </div>
                        <div class="mb-3">
                            <label for="editPlaylistExpiration" class="form-label">Fecha de Expiración (opcional)</label>
                            <input type="datetime-local" class="form-control" id="editPlaylistExpiration">
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="editPlaylistActive">
                            <label class="form-check-label" for="editPlaylistActive">Lista Activa</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-lg" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary btn-lg" id="savePlaylistChangesBtn">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extra_scripts %}
    <style>
        .table th button {
            border: none !important;
            background: none !important;
            font-weight: bold !important;
            color: inherit !important;
        }
        .table th button:hover {
            background-color: rgba(255, 255, 255, 0.1) !important;
            color: inherit !important;
        }
        .table th button:focus {
            box-shadow: none !important;
            color: inherit !important;
        }
        .table-warning {
            --bs-table-bg: #fff3cd;
        }
        .btn-group .btn:first-child {
            border-top-left-radius: 0.375rem;
            border-bottom-left-radius: 0.375rem;
        }
        .btn-group .btn:last-child {
            border-top-right-radius: 0.375rem;
            border-bottom-right-radius: 0.375rem;
        }
        #playlistPageInput {
            max-width: 80px;
        }
        .table th button i.fa-sort-up,
        .table th button i.fa-sort-down {
            color: #0d6efd !important;
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="/static/js/main.js"></script>
    
    <script>
        console.log('Playlist Manager - Inicializando...');

        // Variables globales para paginación de playlists
        let playlistPagination = {
            currentPage: 1,
            pageSize: 25,
            totalItems: 0,
            totalPages: 1,
            filteredData: [],
            searchTerm: '',
            filter: 'all'
        };

        // Funciones auxiliares
        function isPlaylistActivePag(playlist) {
            if (!playlist.is_active) return false;
            if (!playlist.expiration_date) return true;
            return new Date(playlist.expiration_date) > new Date();
        }

        function isExpiredPag(dateString) {
            return new Date(dateString) < new Date();
        }

        function formatDatePag(dateString) {
            if (!dateString) return 'N/A';
            return new Date(dateString).toLocaleString('es-ES', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function escapeHtmlPag(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Función principal para cargar playlists con paginación
        window.loadPlaylistsWithPagination = async function(filter = 'all') {
            console.log('Cargando playlists con paginación:', filter);
            
            const playlistsList = document.getElementById('playlistsList');
            if (!playlistsList) {
                console.error('No se encontró playlistsList');
                return;
            }

            try {
                // Mostrar loading
                playlistsList.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Cargando listas de reproducción...</p>
                        </td>
                    </tr>
                `;

                // Obtener API_URL de main.js o usar default
                const apiUrl = window.API_URL || '/api';
                
                // Cargar todas las playlists
                const response = await fetch(`${apiUrl}/playlists/?limit=10000`);
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} ${response.statusText}`);
                }

                window.allPlaylists = await response.json();
                console.log(`Playlists cargadas: ${window.allPlaylists.length}`);

                // Configurar filtro inicial
                playlistPagination.filter = filter;
                playlistPagination.currentPage = 1;

                // Aplicar filtros y mostrar
                applyPlaylistFilters();

            } catch (error) {
                console.error('Error cargando playlists:', error);
                playlistsList.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="alert alert-danger">
                                Error al cargar listas: ${error.message}
                            </div>
                        </td>
                    </tr>
                `;
            }
        };

        // Aplicar filtros y paginación
        function applyPlaylistFilters() {
            if (!window.allPlaylists || !Array.isArray(window.allPlaylists)) {
                console.log('No hay datos de playlists disponibles');
                return;
            }

            let filtered = [...window.allPlaylists];
            
            // Filtrar por estado
            if (playlistPagination.filter === 'active') {
                filtered = filtered.filter(playlist => isPlaylistActivePag(playlist));
            } else if (playlistPagination.filter === 'inactive') {
                filtered = filtered.filter(playlist => !isPlaylistActivePag(playlist));
            }

            // Filtrar por búsqueda
            if (playlistPagination.searchTerm) {
                filtered = filtered.filter(playlist => 
                    (playlist.title || '').toLowerCase().includes(playlistPagination.searchTerm) ||
                    (playlist.description || '').toLowerCase().includes(playlistPagination.searchTerm)
                );
            }

            playlistPagination.filteredData = filtered;
            playlistPagination.totalItems = filtered.length;
            playlistPagination.totalPages = Math.ceil(playlistPagination.totalItems / playlistPagination.pageSize);
            
            // Ajustar página si es necesario
            if (playlistPagination.currentPage > playlistPagination.totalPages && playlistPagination.totalPages > 0) {
                playlistPagination.currentPage = playlistPagination.totalPages;
            }
            if (playlistPagination.currentPage < 1) {
                playlistPagination.currentPage = 1;
            }

            console.log(`Filtrados: ${playlistPagination.totalItems}, Páginas: ${playlistPagination.totalPages}, Página actual: ${playlistPagination.currentPage}`);

            // Mostrar página actual
            displayPlaylistPage();
            updatePlaylistPaginationInfo();
            updatePlaylistPaginationButtons();
        }

        // Mostrar página actual
        function displayPlaylistPage() {
            const startIndex = (playlistPagination.currentPage - 1) * playlistPagination.pageSize;
            const endIndex = Math.min(startIndex + playlistPagination.pageSize, playlistPagination.totalItems);
            const pageData = playlistPagination.filteredData.slice(startIndex, endIndex);

            const playlistsList = document.getElementById('playlistsList');
            if (!playlistsList) return;
            
            if (pageData.length === 0) {
                playlistsList.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="text-muted">
                                <i class="fas fa-search fa-3x mb-3"></i>
                                <p class="mb-0">No se encontraron listas de reproducción</p>
                                ${playlistPagination.searchTerm ? '<p class="small">Intenta con otros términos de búsqueda</p>' : ''}
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            const rows = pageData.map(playlist => {
                const active = isPlaylistActivePag(playlist);
                const expirationText = playlist.expiration_date 
                    ? `${isExpiredPag(playlist.expiration_date) ? 'Expiró' : 'Expira'}: ${formatDatePag(playlist.expiration_date)}`
                    : 'Sin expiración';

                return `
                    <tr class="${active ? '' : 'table-warning'}">
                        <td>
                            <strong>${escapeHtmlPag(playlist.title || 'Sin título')}</strong>
                        </td>
                        <td>
                            <span class="text-muted">${escapeHtmlPag(playlist.description || 'Sin descripción')}</span>
                        </td>
                        <td>
                            <span class="badge bg-info">${playlist.videos ? playlist.videos.length : 0} videos</span>
                        </td>
                        <td>
                            <small class="text-muted">${expirationText}</small>
                        </td>
                        <td>
                            <span class="badge ${active ? 'bg-success' : 'bg-danger'}">
                                ${active ? 'Activa' : 'Inactiva'}
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm" onclick="openPlaylistDetail(${playlist.id})">
                                <i class="fas fa-eye"></i> Ver Detalles
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');

            playlistsList.innerHTML = rows;
            console.log(`Mostrando ${pageData.length} playlists en página ${playlistPagination.currentPage}`);
        }

        // Actualizar información de paginación
        function updatePlaylistPaginationInfo() {
            const startItem = playlistPagination.totalItems > 0 ? (playlistPagination.currentPage - 1) * playlistPagination.pageSize + 1 : 0;
            const endItem = Math.min(playlistPagination.currentPage * playlistPagination.pageSize, playlistPagination.totalItems);
            
            const playlistCountBadge = document.getElementById('playlistCountBadge');
            if (playlistCountBadge) {
                playlistCountBadge.textContent = `${playlistPagination.totalItems} listas`;
            }
            
            const paginationInfo = document.getElementById('playlistPaginationInfo');
            if (paginationInfo) {
                paginationInfo.textContent = `Mostrando ${startItem} - ${endItem} de ${playlistPagination.totalItems} resultados`;
            }
        }

        // Actualizar botones de paginación
        function updatePlaylistPaginationButtons() {
            const firstBtn = document.getElementById('firstPlaylistPageBtn');
            const prevBtn = document.getElementById('prevPlaylistPageBtn');
            const nextBtn = document.getElementById('nextPlaylistPageBtn');
            const lastBtn = document.getElementById('lastPlaylistPageBtn');
            const pageInput = document.getElementById('playlistPageInput');
            const totalPagesSpan = document.getElementById('totalPlaylistPages');
            const paginationFooter = document.getElementById('playlistPaginationFooter');
            
            if (firstBtn) firstBtn.disabled = playlistPagination.currentPage <= 1;
            if (prevBtn) prevBtn.disabled = playlistPagination.currentPage <= 1;
            if (nextBtn) nextBtn.disabled = playlistPagination.currentPage >= playlistPagination.totalPages;
            if (lastBtn) lastBtn.disabled = playlistPagination.currentPage >= playlistPagination.totalPages;
            
            if (pageInput) {
                pageInput.value = playlistPagination.currentPage;
                pageInput.max = playlistPagination.totalPages;
            }
            
            if (totalPagesSpan) {
                totalPagesSpan.textContent = playlistPagination.totalPages;
            }
            
            if (paginationFooter) {
                const startItem = playlistPagination.totalItems > 0 ? (playlistPagination.currentPage - 1) * playlistPagination.pageSize + 1 : 0;
                const endItem = Math.min(playlistPagination.currentPage * playlistPagination.pageSize, playlistPagination.totalItems);
                paginationFooter.innerHTML = `
                    Página ${playlistPagination.currentPage} de ${playlistPagination.totalPages} 
                    <span class="text-primary">(${startItem}-${endItem} de ${playlistPagination.totalItems})</span>
                `;
            }
        }

        // Funciones de navegación
        window.goToPlaylistPage = function(page) {
            if (page >= 1 && page <= playlistPagination.totalPages && page !== playlistPagination.currentPage) {
                playlistPagination.currentPage = page;
                displayPlaylistPage();
                updatePlaylistPaginationInfo();
                updatePlaylistPaginationButtons();
            }
        };

        window.goToFirstPlaylistPage = function() {
            window.goToPlaylistPage(1);
        };

        window.goToPrevPlaylistPage = function() {
            if (playlistPagination.currentPage > 1) {
                window.goToPlaylistPage(playlistPagination.currentPage - 1);
            }
        };

        window.goToNextPlaylistPage = function() {
            if (playlistPagination.currentPage < playlistPagination.totalPages) {
                window.goToPlaylistPage(playlistPagination.currentPage + 1);
            }
        };

        window.goToLastPlaylistPage = function() {
            window.goToPlaylistPage(playlistPagination.totalPages);
        };

        window.sortPlaylistTable = function(field) {
            console.log('Ordenamiento por:', field);
            // Implementar ordenamiento si se necesita
        };

        // Inicialización al cargar el DOM
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM listo, configurando playlists...');
            
            // Esperar un poco para que main.js se cargue
            setTimeout(() => {
                // Sobrescribir la función loadPlaylists si existe
                if (typeof window.loadPlaylists !== 'function') {
                    window.loadPlaylists = window.loadPlaylistsWithPagination;
                }
                
                console.log('Funciones de playlist configuradas');

                // Configurar event listeners
                setupPlaylistEventListeners();
                
                // Cargar playlists automáticamente
                window.loadPlaylistsWithPagination('all');
            }, 200);
        });

        function setupPlaylistEventListeners() {
            // Filtro de estado
            const playlistFilterStatus = document.getElementById('playlistFilterStatus');
            if (playlistFilterStatus) {
                playlistFilterStatus.addEventListener('change', function() {
                    playlistPagination.filter = this.value;
                    playlistPagination.currentPage = 1;
                    applyPlaylistFilters();
                });
            }

            // Búsqueda con debounce
            const playlistSearchInput = document.getElementById('playlistSearchInput');
            if (playlistSearchInput) {
                let searchTimeout;
                playlistSearchInput.addEventListener('input', function() {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        playlistPagination.searchTerm = this.value.toLowerCase().trim();
                        playlistPagination.currentPage = 1;
                        applyPlaylistFilters();
                    }, 300);
                });
            }

            // Limpiar búsqueda
            const clearPlaylistSearchBtn = document.getElementById('clearPlaylistSearch');
            if (clearPlaylistSearchBtn) {
                clearPlaylistSearchBtn.addEventListener('click', function() {
                    const searchInput = document.getElementById('playlistSearchInput');
                    if (searchInput) {
                        searchInput.value = '';
                        playlistPagination.searchTerm = '';
                        playlistPagination.currentPage = 1;
                        applyPlaylistFilters();
                    }
                });
            }

            // Selector de tamaño de página
            const playlistPageSizeSelect = document.getElementById('playlistPageSizeSelect');
            if (playlistPageSizeSelect) {
                playlistPageSizeSelect.addEventListener('change', function() {
                    playlistPagination.pageSize = parseInt(this.value);
                    playlistPagination.currentPage = 1;
                    applyPlaylistFilters();
                });
            }

            // Formulario de creación
            const playlistCreateForm = document.getElementById('playlistCreateForm');
            if (playlistCreateForm) {
                playlistCreateForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    if (typeof createPlaylist === 'function') {
                        createPlaylist(this);
                    } else {
                        console.warn('Función createPlaylist no encontrada en main.js');
                    }
                });
            }

            // Formulario de edición
            const editPlaylistForm = document.getElementById('editPlaylistForm');
            if (editPlaylistForm) {
                const saveBtn = document.getElementById('savePlaylistChangesBtn');
                if (saveBtn) {
                    saveBtn.addEventListener('click', function() {
                        if (typeof savePlaylistChanges === 'function') {
                            savePlaylistChanges();
                        } else {
                            console.warn('Función savePlaylistChanges no encontrada en main.js');
                        }
                    });
                }
            }

            console.log('Event listeners de playlist configurados');
        }

        // Funciones placeholder que main.js puede sobrescribir
        window.openPlaylistDetail = window.openPlaylistDetail || function(playlistId) {
            console.log('openPlaylistDetail placeholder - ID:', playlistId);
        };

        window.createPlaylist = window.createPlaylist || function(form) {
            console.log('createPlaylist placeholder');
        };

        window.savePlaylistChanges = window.savePlaylistChanges || function() {
            console.log('savePlaylistChanges placeholder');
        };

        console.log('Script de playlist cargado');
    </script>
{% endblock %}
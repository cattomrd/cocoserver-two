# router/auth.py - VERSI√ìN SIMPLIFICADA QUE FUNCIONA
# Reemplaza completamente tu archivo router/auth.py actual

from fastapi import APIRouter, Request, Form, Depends, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from pathlib import Path
import logging
import hashlib
import secrets
from datetime import datetime, timedelta
from typing import Optional
import bcrypt

from models.database import get_db
from models.models import User

logger = logging.getLogger(__name__)

# Setup templates
BASE_DIR = Path(__file__).resolve().parent.parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

router = APIRouter(tags=["authentication"])

# ==========================================
# SISTEMA DE SESIONES SIMPLE
# ==========================================

# Almac√©n de sesiones en memoria
active_sessions = {}

def generate_session_token() -> str:
    """Genera un token de sesi√≥n seguro"""
    return secrets.token_urlsafe(32)

def create_session(user_id: int, username: str) -> str:
    """Crea una nueva sesi√≥n para el usuario"""
    session_token = generate_session_token()
    session_data = {
        'user_id': user_id,
        'username': username,
        'created_at': datetime.utcnow(),
        'last_activity': datetime.utcnow(),
        'expires_at': datetime.utcnow() + timedelta(hours=24)
    }
    active_sessions[session_token] = session_data
    logger.info(f"Sesi√≥n creada para usuario {username}: {session_token[:10]}...")
    return session_token

def verify_session(session_token: str) -> Optional[dict]:
    """Verifica si una sesi√≥n es v√°lida"""
    if not session_token or session_token not in active_sessions:
        return None
    
    session_data = active_sessions[session_token]
    
    # Verificar si la sesi√≥n no ha expirado
    if datetime.utcnow() > session_data['expires_at']:
        logger.info(f"Sesi√≥n expirada eliminada: {session_token[:10]}...")
        del active_sessions[session_token]
        return None
    
    # Actualizar √∫ltima actividad
    session_data['last_activity'] = datetime.utcnow()
    return session_data

def revoke_session(session_token: str) -> bool:
    """Revoca una sesi√≥n espec√≠fica"""
    if session_token in active_sessions:
        del active_sessions[session_token]
        logger.info(f"Sesi√≥n revocada: {session_token[:10]}...")
        return True
    return False

# ==========================================
# FUNCI√ìN DE AUTENTICACI√ìN - MISMA L√ìGICA DEL SCRIPT
# ==========================================

def verify_password(password: str, hashed: str) -> bool:
    """Verificar contrase√±a - VERSI√ìN QUE MANEJA USUARIOS AD"""
    try:
        # ‚≠ê VERIFICAR SI LA CONTRASE√ëA ES NULA (usuarios AD)
        if hashed is None or hashed == "":
            logger.info("üîë Usuario sin contrase√±a local (posible usuario AD)")
            return False  # No verificar localmente, debe usar AD
        
        # Verificar bcrypt (usuarios locales)
        if hashed.startswith('$2b$'):
            return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))
        else:
            # Contrase√±a en texto plano o SHA256 (usuarios locales)
            return password == hashed or hashed == hashlib.sha256(password.encode()).hexdigest()
            
    except Exception as e:
        logger.error(f"Error verificando contrase√±a: {e}")
        return False
    
def authenticate_ad_user(username: str, password: str) -> bool:
    """Autenticar usuario contra Active Directory"""
    try:
        logger.info(f"üè¢ Intentando autenticaci√≥n AD para: {username}")
        
        # Importar librer√≠a LDAP
        try:
            from ldap3 import Server, Connection, ALL, SIMPLE
        except ImportError:
            logger.error("‚ùå Librer√≠a ldap3 no instalada - pip install ldap3")
            return False
        
        # Configuraci√≥n AD desde variables de entorno
        import os
        ad_server = os.getenv('AD_SERVER', '172.19.2.241')
        ad_domain = os.getenv('AD_DOMAIN_FQDN', 'ikeasi.com')
        ad_base_dn = os.getenv('AD_BASE_DN', 'DC=ikeaspc,DC=ikeasi,DC=com')
        
        # Construir DN del usuario
        user_dn = f"{username}@{ad_domain}"
        
        logger.info(f"üîó Conectando a AD: {ad_server}")
        logger.info(f"üë§ Usuario AD: {user_dn}")
        
        # Crear servidor AD
        server = Server(ad_server, port=389, use_ssl=False, get_info=ALL)
        
        # Intentar conexi√≥n con las credenciales del usuario
        conn = Connection(
            server,
            user=user_dn,
            password=password,
            authentication=SIMPLE,
            auto_bind=True
        )
        
        if conn.bound:
            logger.info(f"‚úÖ Autenticaci√≥n AD exitosa para: {username}")
            conn.unbind()
            return True
        else:
            logger.warning(f"‚ùå Autenticaci√≥n AD fallida para: {username}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error en autenticaci√≥n AD para {username}: {str(e)}")
        return False
        
def authenticate_user(db: Session, username: str, password: str) -> tuple[bool, Optional[User], str]:
    """
    Autentica un usuario - VERSI√ìN QUE SOPORTA AD + LOCAL
    """
    try:
        logger.info(f"üîê Intento de autenticaci√≥n para: {username}")
        
        # Buscar usuario por username o email
        user = db.query(User).filter(
            (User.username == username) | (User.email == username)
        ).first()
        
        if not user:
            logger.warning(f"‚ùå Usuario no encontrado: {username}")
            return False, None, "Usuario no encontrado"
        
        logger.info(f"üë§ Usuario encontrado: {user.username} ({user.email})")
        logger.info(f"üèÉ Estado: {'Activo' if user.is_active else 'Inactivo'}")
        logger.info(f"üëë Admin: {'S√≠' if user.is_admin else 'No'}")
        
        if not user.is_active:
            logger.warning(f"‚ùå Usuario desactivado: {username}")
            return False, None, "Usuario desactivado"
        
        # ‚≠ê DETERMINAR TIPO DE AUTENTICACI√ìN
        auth_provider = getattr(user, 'auth_provider', 'local')
        has_local_password = user.password_hash is not None and user.password_hash != ""
        
        logger.info(f"üîç Proveedor de auth: {auth_provider}")
        logger.info(f"üîê Tiene contrase√±a local: {'S√≠' if has_local_password else 'No'}")
        
        # Intentar autenticaci√≥n local primero (si tiene contrase√±a)
        if has_local_password:
            logger.info(f"üè† Intentando autenticaci√≥n local para: {username}")
            if verify_password(password, user.password_hash):
                logger.info(f"‚úÖ Autenticaci√≥n local exitosa para: {username}")
                return True, user, "Autenticaci√≥n local exitosa"
            else:
                logger.info(f"‚ùå Autenticaci√≥n local fallida para: {username}")
        
        # Si no tiene contrase√±a local O la autenticaci√≥n local fall√≥, intentar AD
        if auth_provider == 'ad' or not has_local_password:
            logger.info(f"üè¢ Intentando autenticaci√≥n AD para: {username}")
            if authenticate_ad_user(username, password):
                logger.info(f"‚úÖ Autenticaci√≥n AD exitosa para: {username}")
                return True, user, "Autenticaci√≥n AD exitosa"
            else:
                logger.warning(f"‚ùå Autenticaci√≥n AD fallida para: {username}")
        
        # Si llegamos aqu√≠, todas las autenticaciones fallaron
        logger.warning(f"‚ùå Todas las autenticaciones fallaron para: {username}")
        return False, None, "Contrase√±a incorrecta"
        
    except Exception as e:
        logger.error(f"‚ùå Error en authenticate_user: {str(e)}")
        return False, None, "Error interno de autenticaci√≥n"
    


# ==========================================
# RUTAS DE AUTENTICACI√ìN
# ==========================================

@router.get("/login", response_class=HTMLResponse)
async def login_page(request: Request, error: str = None, next: str = "/"):
    """P√°gina de login"""
    
    # Si ya est√° autenticado, redirigir
    session_token = request.cookies.get("session")
    if session_token and verify_session(session_token):
        logger.info("Usuario ya autenticado, redirigiendo...")
        return RedirectResponse(url=next, status_code=302)
    
    context = {
        "request": request,
        "title": "Iniciar Sesi√≥n",
        "error": error,
        "next": next
    }
    
    return templates.TemplateResponse("login.html", context)

@router.post("/login")
async def login_submit(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    next: str = Form(default="/"),
    db: Session = Depends(get_db)
):
    """Procesa el login del usuario"""
    
    try:
        logger.info(f"üìù Login form submit para: {username}")
        
        # Autenticar usuario
        success, user, message = authenticate_user(db, username, password)
        
        if not success or not user:
            logger.warning(f"‚ùå Login fallido: {username} - {message}")
            error_url = f"/login?error={message}&next={next}"
            return RedirectResponse(url=error_url, status_code=302)
        
        # Crear sesi√≥n
        session_token = create_session(user.id, user.username)
        
        # Crear respuesta con cookie
        response = RedirectResponse(url=next, status_code=302)
        response.set_cookie(
            key="session",
            value=session_token,
            httponly=True,
            max_age=86400,  # 24 horas
            path="/",
            secure=False,  # Cambiar a True en producci√≥n con HTTPS
            samesite="lax"
        )
        
        logger.info(f"‚úÖ Login exitoso: {username}")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en login: {str(e)}")
        error_url = f"/login?error=Error interno del servidor&next={next}"
        return RedirectResponse(url=error_url, status_code=302)

@router.post("/api/login")
async def api_login(
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """API endpoint para login (para AJAX) - VERSI√ìN CON COOKIE"""
    
    try:
        logger.info(f"üîê API login para: {username}")
        
        # Autenticar usuario usando la misma funci√≥n que funciona
        success, user, message = authenticate_user(db, username, password)
        
        if not success or not user:
            logger.warning(f"‚ùå API login fallido: {username} - {message}")
            return JSONResponse({
                "success": False,
                "message": message
            }, status_code=401)
        
        # Crear sesi√≥n
        session_token = create_session(user.id, user.username)
        
        logger.info(f"‚úÖ API login exitoso: {username}")
        
        # ‚≠ê CREAR RESPUESTA CON COOKIE
        response_data = {
            "success": True,
            "message": f"Bienvenido, {user.username}",
            "user": {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "is_admin": user.is_admin
            },
            "session_token": session_token
        }
        
        # Crear respuesta JSON
        response = JSONResponse(response_data)
        
        # ‚≠ê CONFIGURAR COOKIE DE SESI√ìN
        response.set_cookie(
            key="session",
            value=session_token,
            httponly=True,
            max_age=86400,  # 24 horas
            path="/",
            secure=False,  # Cambiar a True en producci√≥n con HTTPS
            samesite="lax"
        )
        
        logger.info(f"üç™ Cookie de sesi√≥n configurada: {session_token[:10]}...")
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en API login: {str(e)}")
        return JSONResponse({
            "success": False,
            "message": "Error interno del servidor"
        }, status_code=500)
        
@router.get("/logout")
@router.post("/logout")
async def logout(request: Request):
    """Logout completo y seguro"""
    
    # Obtener token de sesi√≥n
    session_token = request.cookies.get("session")
    
    if session_token:
        # Revocar sesi√≥n del servidor
        revoke_session(session_token)
        logger.info(f"üö™ Logout: sesi√≥n {session_token[:10]}... revocada")
    
    # Crear respuesta de redirecci√≥n
    response = RedirectResponse(url="/login", status_code=302)
    
    # Eliminar cookie de forma segura
    response.delete_cookie(key="session", path="/")
    
    return response

@router.get("/api/logout")
async def api_logout(request: Request):
    """API endpoint para logout"""
    
    session_token = request.cookies.get("session")
    
    if session_token:
        revoke_session(session_token)
        logger.info(f"üö™ API logout: sesi√≥n {session_token[:10]}... revocada")
    
    return JSONResponse({
        "success": True,
        "message": "Sesi√≥n cerrada correctamente"
    })

# ==========================================
# FUNCI√ìN PARA VERIFICAR AUTENTICACI√ìN (para main.py)
# ==========================================

def get_current_user_from_request(request: Request, db: Session) -> Optional[dict]:
    """Obtiene el usuario actual desde la request"""
    
    session_token = request.cookies.get("session")
    if not session_token:
        return None
    
    session_data = verify_session(session_token)
    if not session_data:
        return None
    
    # Obtener datos actualizados del usuario desde la BD
    user = db.query(User).filter(User.id == session_data['user_id']).first()
    if not user or not user.is_active:
        # Si el usuario no existe o est√° desactivado, revocar sesi√≥n
        revoke_session(session_token)
        return None
    
    return {
        'id': user.id,
        'username': user.username,
        'email': user.email,
        'is_admin': user.is_admin,
        'is_active': user.is_active,
        'session_token': session_token
    }

# Funci√≥n para usar en main.py
def is_authenticated(request: Request) -> bool:
    """Verificar si el usuario tiene una sesi√≥n v√°lida por cookie"""
    session_token = request.cookies.get("session")
    return session_token and verify_session(session_token) is not None

# ==========================================
# RUTA DE DEBUG (TEMPORAL)
# ==========================================

@router.get("/debug/sessions")
async def debug_sessions(request: Request):
    """Ver sesiones activas - SOLO PARA DEBUG"""
    
    session_token = request.cookies.get("session")
    current_session = verify_session(session_token) if session_token else None
    
    return JSONResponse({
        "total_sessions": len(active_sessions),
        "current_session_valid": bool(current_session),
        "current_session_token": session_token[:10] + "..." if session_token else None,
        "current_session_data": current_session,
        "all_sessions": {
            token[:10] + "...": {
                "username": data["username"],
                "created_at": data["created_at"].isoformat(),
                "expires_at": data["expires_at"].isoformat()
            } for token, data in active_sessions.items()
        }
    })

# ==========================================
# RUTA DE TEST DE AUTENTICACI√ìN
# ==========================================

@router.post("/test-auth")
async def test_auth_endpoint(
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """Endpoint para probar autenticaci√≥n - SOLO PARA DEBUG"""
    
    success, user, message = authenticate_user(db, username, password)
    
    return JSONResponse({
        "success": success,
        "message": message,
        "user": {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "is_admin": user.is_admin,
            "is_active": user.is_active
        } if user else None
    })